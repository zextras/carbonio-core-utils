#!/bin/bash

# SPDX-FileCopyrightText: 2022 Synacor, Inc.
# SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
#
# SPDX-License-Identifier: GPL-2.0-only

usage() {
  echo "Usage: $0 {start|stop|run|restart|check|supervise} [ CONFIGS ... ] "
  exit 1
}

[ $# -gt 0 ] || usage

TMPJ=/tmp/j$$

##################################################
# Get the action & configs
##################################################

ACTION=$1
shift
ARGS="$*"
CONFIGS=""

##################################################
# Find directory function
##################################################
findDirectory() {
  OP=$1
  shift
  for L in $*; do
    [ $OP $L ] || continue
    echo $L
    break
  done
}

##################################################
# See if there's a user-specific configuration file
##################################################
if [ -f $HOME/.jettyrc ]; then
  . $HOME/.jettyrc
fi

##################################################
# Jetty's hallmark
##################################################
JETTY_INSTALL_TRACE_FILE="start.jar"

##################################################
# Try to determine JETTY_HOME if not set
##################################################
if [ -z "$JETTY_HOME" ]; then
  JETTY_HOME_1=$(dirname "$0")
  JETTY_HOME_1=$(dirname "$JETTY_HOME_1")
  if [ -f "${JETTY_HOME_1}/${JETTY_INSTALL_TRACE_FILE}" ]; then
    JETTY_HOME=${JETTY_HOME_1}
  fi
  if [ -f "${JETTY_HOME_1}/jetty/${JETTY_INSTALL_TRACE_FILE}" ]; then
    JETTY_HOME=${JETTY_HOME_1}/jetty
  fi
fi

##################################################
# No JETTY_HOME yet? We're out of luck!
##################################################
if [ -z "$JETTY_HOME" ]; then
  echo "** ERROR: JETTY_HOME not set, you need to set it or install in a standard location"
  exit 1
fi

#####################################################
# Check that jetty is where we think it is
#####################################################
if [ ! -r $JETTY_HOME/$JETTY_INSTALL_TRACE_FILE ]; then
  echo "** ERROR: Oops! Jetty doesn't appear to be installed in $JETTY_HOME"
  echo "** ERROR:  $JETTY_HOME/$JETTY_INSTALL_TRACE_FILE is not readable!"
  exit 1
fi

#########################################################################
# Zimbra tweak, because we want to keep jetty.conf under $JETTY_HOME/etc
#########################################################################
if [ -f $JETTY_HOME/etc/jettyrc ]; then
  . $JETTY_HOME/etc/jettyrc
fi

###########################################################
# Get the list of config.xml files from the command line.
###########################################################
if [ ! -z "$ARGS" ]; then
  for A in $ARGS; do
    if [ -f $A ]; then
      CONF="$A"
    elif [ -f $JETTY_HOME/etc/$A ]; then
      CONF="$JETTY_HOME/etc/$A"
    elif [ -f ${A}.xml ]; then
      CONF="${A}.xml"
    elif [ -f $JETTY_HOME/etc/${A}.xml ]; then
      CONF="$JETTY_HOME/etc/${A}.xml"
    else
      echo "** ERROR: Cannot find configuration '$A' specified in the command line."
      exit 1
    fi
    if [ ! -r $CONF ]; then
      echo "** ERROR: Cannot read configuration '$A' specified in the command line."
      exit 1
    fi
    CONFIGS="$CONFIGS $CONF"
  done
fi

#####################################################
# Run the standard server if there's nothing else to run
#####################################################
if [ -z "$CONFIGS" ]; then
  CONFIGS="${JETTY_HOME}/etc/jetty.xml"
fi

#####################################################
# Find a location for the pid file
#####################################################
if [ -z "$JETTY_RUN" ]; then
  JETTY_RUN=$(findDirectory -w /var/run /usr/var/run /tmp)
fi

#####################################################
# Find a PID for the pid file
#####################################################
if [ -z "$JETTY_PID" ]; then
  JETTY_PID="$JETTY_RUN/jetty.pid"
fi

#####################################################
# Find a location for the jetty console
#####################################################
if [ -z "$JETTY_CONSOLE" ]; then
  if [ -w /dev/console ]; then
    JETTY_CONSOLE=/dev/console
  else
    JETTY_CONSOLE=/dev/tty
  fi
fi

##################################################
# Check for JAVA_HOME
##################################################
if [ -x /opt/zextras/common/lib/jvm/java/bin/java ]; then
  JAVA=/opt/zextras/common/lib/jvm/java/bin/java
else
  JAVA=$(which java)
fi

JAVA_HOME=$(dirname $JAVA)
JAVA_HOME=$(dirname $JAVA_HOME)

echo "Found JAVA=$JAVA in JAVA_HOME=$JAVA_HOME"

##################################################
# Determine which JVM of version >1.2
# Try to use JAVA_HOME
##################################################
if [ "$JAVA" = "" -a "$JAVA_HOME" != "" ]; then
  if [ ! -z "$JAVACMD" ]; then
    JAVA="$JAVACMD"
  else
    [ -x $JAVA_HOME/bin/jre -a ! -d $JAVA_HOME/bin/jre ] && JAVA=$JAVA_HOME/bin/jre
    [ -x $JAVA_HOME/bin/java -a ! -d $JAVA_HOME/bin/java ] && JAVA=$JAVA_HOME/bin/java
  fi
fi

if [ "$JAVA" = "" ]; then
  echo "Cannot find a JRE or JDK. Please set JAVA_HOME to a >=1.7 JRE" 2>&2
  exit 1
fi

JAVA_VERSION=$(expr "$($JAVA -version 2>&1 | head -1)" : '.*1\.\([0-9]\)')

#####################################################
# See if JETTY_PORT is defined
#####################################################
if [ "$JETTY_PORT" != "" ]; then
  JAVA_OPTIONS="$JAVA_OPTIONS -Djetty.port=$JETTY_PORT"
fi

#####################################################
# Add jetty properties to Java VM options.
#####################################################
MAILBOXD_JAVA_OPTIONS=$(/opt/zextras/bin/zmlocalconfig -x -m nokey mailboxd_java_options)
JAVA_OPTIONS="$MAILBOXD_JAVA_OPTIONS $JAVA_OPTIONS -Djetty.home=$JETTY_HOME -XX:PermSize=128m -XX:MaxPermSize=350m"

#####################################################
# Add spnego properties to Java VM options.
#####################################################
#
# Note: This script is *only* used in dev environment.
#       In production, the jetty startup script (zmmailboxdctl) uses
#       zmconfigd config rewrite to avoid a zmprov call.
#
# SPNEGO_ENABLED_CONFIG =`/opt/zextras/bin/zmprov -l gcf zimbraSpnegoAuthEnabled`
SPNEGO_ENABLED_CONFIG="zimbraSpnegoAuthEnabled: FALSE"
SPNEGO_ENABLED=$(echo $SPNEGO_ENABLED_CONFIG | sed -e 's/zimbraSpnegoAuthEnabled: //g')

if [ "$SPNEGO_ENABLED" = "TRUE" ]; then
  SPNEGO_JAVA_OPTIONS=$(/opt/zextras/bin/zmlocalconfig -x -m nokey spnego_java_options)
  #  SPNEGO_JAVA_OPTIONS="$SPNEGO_JAVA_OPTIONS -Dsun.security.spnego.debug=all"
  JAVA_OPTIONS="$JAVA_OPTIONS $SPNEGO_JAVA_OPTIONS"
fi

#####################################################
# This is how the Jetty server will be started
#####################################################
RUN_CMD="$JAVA -ea -Dfile.encoding=UTF-8 $JAVA_OPTIONS -jar $JETTY_HOME/start.jar $JETTY_ARGS $CONFIGS"

#####################################################
# Function for testing whether Jetty is running
#####################################################
running() {
  if [ -f $JETTY_PID ] && ps -p $(cat $JETTY_PID) >/dev/null; then
    return 0
  fi
  return 1
}

#####################################################
# Comment these out after you're happy with what
# the script is doing.
#####################################################
echo "JETTY_HOME     =  $JETTY_HOME"
echo "JETTY_RUN      =  $JETTY_RUN"
echo "JETTY_PID      =  $JETTY_PID"
echo "JETTY_CONSOLE  =  $JETTY_CONSOLE"
echo "JETTY_ARGS     =  $JETTY_ARGS"
echo "CONFIGS        =  $CONFIGS"
echo "JAVA_OPTIONS   =  $JAVA_OPTIONS"
echo "JAVA           =  $JAVA"

##################################################
# Do the action
##################################################
case "$ACTION" in
  start)
    echo "Starting Jetty: "

    if running; then
      echo "Already Running!!"
      exit 1
    fi

    echo "STARTED Jetty $(date)" >>$JETTY_CONSOLE

    nohup sh -c "exec $RUN_CMD >>$JETTY_CONSOLE 2>&1" >/dev/null &
    echo $! >$JETTY_PID
    echo "Jetty running pid="$(cat $JETTY_PID)
    ;;

  stop)
    PID=$(cat $JETTY_PID 2>/dev/null)
    echo "Shutting down Jetty: $PID"
    kill $PID 2>/dev/null
    sleep 2
    kill $PID 2>/dev/null
    rm -f $JETTY_PID
    echo "STOPPED $(date)" >>$JETTY_CONSOLE
    ;;

  restart)
    $0 stop $*
    sleep 5
    $0 start $*
    ;;

  supervise)
    #
    # Under control of daemontools supervise monitor which
    # handles restarts and shutdowns via the svc program.
    #
    exec $RUN_CMD
    ;;

  run | demo)
    echo "Running Jetty: "

    if running; then
      echo "Already Running!!"
      exit 1
    fi

    exec $RUN_CMD
    ;;

  check)
    echo "Checking arguments to Jetty: "
    echo "JETTY_HOME     =  $JETTY_HOME"
    echo "JETTY_RUN      =  $JETTY_RUN"
    echo "JETTY_PID      =  $JETTY_PID"
    echo "JETTY_CONSOLE  =  $JETTY_CONSOLE"
    echo "JETTY_PORT     =  $JETTY_PORT"
    echo "CONFIGS        =  $CONFIGS"
    echo "JAVA_OPTIONS   =  $JAVA_OPTIONS"
    echo "JAVA           =  $JAVA"
    echo "CLASSPATH      =  $CLASSPATH"
    echo "RUN_CMD        =  $RUN_CMD"
    echo

    if running; then
      echo "Jetty running pid="$(cat $JETTY_RUN/jetty.pid)
      exit 0
    fi
    exit 1
    ;;

  *)
    usage
    ;;
esac

exit 0
