#!/bin/bash

# SPDX-FileCopyrightText: 2022 Synacor, Inc.
# SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
#
# SPDX-License-Identifier: GPL-2.0-only

# shellcheck disable=SC2046
# shellcheck disable=SC2154

mkdir -p "/opt/zextras/data/ldap/state/run/"

source /opt/zextras/bin/zmshutil || exit 1
zmsetvars

slapd=/opt/zextras/common/libexec/slapd

if [ ! -f /.dockerenv ]; then
  ulimit -n 32768
  ulimit -c unlimited
  ulimit -v unlimited
fi

if [ "$ldap_is_master" = "false" ]; then
  if [ "$ldap_url" = "$ldap_master_url" ] && [ "x$1" != "xstop" ]; then
    echo "ldap_url and ldap_master_url cannot be the same on an ldap replica"
    exit 1
  fi
fi

checkrunning() {
  if pidof "${slapd}" >/dev/null 2>&1; then
    RUNNING=1
  else
    RUNNING=0
  fi
}

checkListening() {
  local search_timeout
  search_timeout=30 #timelimit for ldapsearch
  local ldap_search_cmd ldap_search_cmd_args
  ldap_search_cmd="/opt/zextras/common/bin/ldapsearch"
  ldap_search_cmd_args=" -x \
    -l $search_timeout \
    -b "" \
    -s base \
    -H ldapi:///"

  if [ "$ldap_common_require_tls" = "0" ]; then
    ldap_search_cmd+="${ldap_search_cmd_args}"
  else
    ldap_search_cmd+="${ldap_search_cmd_args} -ZZ"
  fi

  if eval "$ldap_search_cmd >/dev/null 2>&1" != 1; then
    LISTENING=0
  else
    LISTENING=1
  fi
}

start() {
  # Our ldap url should be the first in the list in localconfig
  local bind_url=$ldap_bind_url
  if [ "$bind_url" = "" ]; then
    bind_url=$(echo "${ldap_url}" | awk '{print $1}')
  fi

  checkrunning
  if [ $RUNNING = 0 ]; then
    if ! $slapd -l LOCAL0 \
      -h "${bind_url} ldapi:///" \
      -F /opt/zextras/data/ldap/config; then
      echo "Failed to start slapd"
    fi
    echo "Started slapd"
  else
    echo "slapd already running"
  fi

  checkListening

  if [ $LISTENING = 0 ]; then
    echo "Error: Unable to check that slapd is listening to connections"
    exit 1
  fi
}

stop() {
  checkrunning
  if [ $RUNNING = 0 ]; then
    echo "slapd not running"
    exit 0
  else
    echo -n "Stopping slapd..."
    if ! kill $(pidof $slapd 2>/dev/null); then
      echo " failed to stop $PID"
      exit 1
    else
      echo " done."
    fi
  fi
  exit 0
}

status() {
  checkrunning
  echo -n "slapd is "
  if [ $RUNNING = 0 ]; then
    echo "not running."
    exit 1
  else
    echo "running."
    exit 0
  fi
}

case "$1" in
restart)
  $0 stop
  $0 start
  ;;
start)
  start
  ;;
stop)
  stop
  ;;
status)
  status
  ;;
*)
  echo "Usage: $0 start|stop|status"
  exit 1
  ;;
esac
