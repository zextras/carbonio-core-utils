#!/bin/bash

# SPDX-FileCopyrightText: 2022 Synacor, Inc.
# SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
#
# SPDX-License-Identifier: GPL-2.0-only

if [ "$(whoami)" != zextras ]; then
  echo Error: must be run as zextras user
  exit 1
fi

if [ ! -x "/opt/zextras/common/sbin/amavisd" ]; then
  exit 0
fi

source /opt/zextras/bin/zmshutil || exit 1
zmsetvars

if [ ! -d "/opt/zextras/data/amavisd/.spamassassin" ]; then
  mkdir -p /opt/zextras/data/amavisd/.spamassassin
fi

rewriteconfig() {
  /opt/zextras/libexec/configrewrite amavis antispam >/dev/null 2>&1
  /opt/zextras/libexec/zmaltermimeconfig >/dev/null 2>&1
}

checkrunning() {
  # Get PID from scanning the proc table.
  if [ "$PID" = "" ]; then
    # PID file is NULL.  Get info from proc table.
    PID=$(ps axo user,pid,ppid,command | awk '{ if ((($4 ~ /^amavisd$/) || ($4 ~ /^\/opt\/zextras\/common\/sbin\/amavisd$/)) && ($5 ~ /^\(master\)$/)) { print $2 } }')
  fi
  # If PID is still not set, then we cannot find any amavisd (master) process.  Assume amavisd is not running.
  if [ "$PID" = "" ]; then
    RUNNING=0
    return
  fi

  # If we get to this point the PID was defined in the PID file.  But we're not sure we trust it's validity
  # so we're going the verify it from ps output!
  PID=$(ps axo user,pid,ppid,command | awk '{ if (($2 == "$PID") && (($4 ~ /^amavisd$/) || ($4 ~ /^\/opt\/zextras\/common\/sbin\/amavisd$/)) && ($5 ~ /^\(master\)$/)) { print $2 } }')
  # If PID is NULL now, then the PID stored in the PID file was bogus!
  # Let's try to find the true amavisd (master) process ID
  if [ "$PID" = "" ]; then
    PID=$(ps axo user,pid,ppid,command | awk '{ if ((($4 ~ /^amavisd$/) || ($4 ~ /^\/opt\/zextras\/common\/sbin\/amavisd$/)) && ($5 ~ /^\(master\)$/)) { print $2 } }')
  fi
  # If the PID is still NULL now, it really must not be running.
  if [ "$PID" = "" ]; then
    RUNNING=0
    return
  else
    RUNNING=1
    return
  fi
}

checkrunning-mc() {
  #  Get PID from scanning the proc table.
  if [ "$MCPID" = "" ]; then
    # PID file is NULL.  Get info from proc table.
    MCPID=$(ps axo user,pid,ppid,command | awk '{ if ((($6 ~ /amavis-mc$/) || ($6 ~ /\/opt\/zextras\/common\/sbin\/amavis-mc$/))) { print $2 } }')
  fi
  # If PID is still not set, then we cannot find any amavisd (master) process.  Assume amavisd is not running.
  if [ "$MCPID" = "" ]; then
    MCRUNNING=0
    return
  fi

  MCRUNNING=1
  return
}

#
# Main
#
case "$1" in
  'start')
    checkrunning-mc
    echo -n "Starting amavisd-mc..."
    if [ $MCRUNNING = 1 ]; then
      echo "amavisd-mc is already running."
    else
      if [ $MCRUNNING = 0 ]; then
        sudo /opt/zextras/common/sbin/amavis-mc
        for ((i = 0; i < 30; i++)); do
          checkrunning-mc
          if [ $MCRUNNING = 1 ]; then
            break
          fi
          sleep 1
        done
      fi
      if [ "$MCPID" = "" ]; then
        echo "failed."
        exit
      else
        echo "done."
      fi
    fi
    checkrunning
    echo -n "Starting amavisd..."
    if [ $RUNNING = 1 ]; then
      echo "amavisd is already running."
      exit 0
    else
      if [ ! -d /opt/zextras/data/amavisd/quarantine ]; then
        mkdir /opt/zextras/data/amavisd/quarantine
      fi
      if [ ! -d /opt/zextras/data/amavisd/tmp ]; then
        mkdir /opt/zextras/data/amavisd/tmp
      else
        find /opt/zextras/data/amavisd/tmp -maxdepth 1 -type d -name 'amavis-*' -exec rm -rf {} \; >/dev/null 2>&1
      fi
      if [ ! -d /opt/zextras/data/amavisd/var ]; then
        mkdir /opt/zextras/data/amavisd/var
      fi
      if [ "$2" == "" ]; then
        rewriteconfig
      fi
      /opt/zextras/common/sbin/amavisd -X no_conf_file_writable_check -c \
        /opt/zextras/conf/amavisd.conf &
      for ((i = 0; i < 30; i++)); do
        checkrunning
        if [ $RUNNING = 1 ]; then
          break
        fi
        sleep 1
      done
      if [ "$PID" = "" ]; then
        echo "failed."
      else
        echo "done."
      fi
    fi
    ;;

  'kill')
    $0 stop
    ;;

  'stop')
    checkrunning
    echo -n "Stopping amavisd..."
    if [ $RUNNING = 0 ]; then
      echo "amavisd is not running."
    else
      kill "$PID" 2>/dev/null
      for ((i = 0; i < 300; i++)); do
        sleep 5
        kill -0 "$PID" 2>/dev/null
        rc=$?
        if [ $rc -ne 0 ]; then
          break
        fi
      done
      kill "$PID" 2>/dev/null
      rc=$?
      if [ $rc -ne 0 ]; then
        echo " done."
      else
        echo " failed to stop $PID"
        exit 1
      fi
    fi
    checkrunning-mc
    echo -n "Stopping amavisd-mc..."
    if [ $MCRUNNING = 0 ]; then
      echo "amavisd-mc is not running."
    else
      kill "$MCPID" 2>/dev/null
      for ((i = 0; i < 300; i++)); do
        sleep 5
        kill -0 "$MCPID" 2>/dev/null
        rc=$?
        if [ $rc -ne 0 ]; then
          break
        fi
      done
      kill "$MCPID" 2>/dev/null
      rc=$?
      if [ $rc -ne 0 ]; then
        echo " done."
      else
        echo " failed to stop $PID"
        exit 1
      fi
    fi
    exit 0
    ;;

  'restart' | 'reload')
    $0 stop
    $0 start "$2"
    ;;

  'status')
    checkrunning
    echo -n "amavisd is "
    if [ $RUNNING = 0 ]; then
      echo "not running."
      exit 1
    else
      echo "running."
    fi
    checkrunning-mc
    echo -n "amavisd-mc is "
    if [ $MCRUNNING = 0 ]; then
      echo "not running."
      exit 1
    else
      echo "running."
      exit 0
    fi
    ;;

  *)
    echo "Usage: $0 start|stop|kill|reload|restart|status"
    exit 1
    ;;
esac
