#!/bin/bash

# SPDX-FileCopyrightText: 2022 Synacor, Inc.
# SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
#
# SPDX-License-Identifier: GPL-2.0-only

if [ "$(whoami)" != zextras ]; then
  echo Error: must be run as zextras user
  exit 1
fi

source /opt/zextras/bin/zmshutil || exit 1
zmsetvars

pidfile=${cbpolicyd_pid_file:=${zimbra_log_directory}/cbpolicyd.pid}
dbfile=${cbpolicyd_db_file:=/opt/zextras/data/cbpolicyd/db/cbpolicyd.sqlitedb}

rewriteconfig() {
  /opt/zextras/libexec/configrewrite cbpolicyd >/dev/null 2>&1
}

getpid() {
  if [ -f $pidfile ]; then
    PID=$(cat $pidfile)
  fi
}

checkrunning() {
  getpid
  if [ "$PID" = "" ]; then
    RUNNING=0
    if [ -f $pidfile ]; then
      rm -f $pidfile
    fi
  else
    kill -0 $PID 2>/dev/null
    if [ $? != 0 ]; then
      PID=""
      RUNNING=0
    else
      RUNNING=1
    fi
  fi
}

#
# Main
#
case "$1" in
  'start')
    if [ ! -x /opt/zextras/common/bin/cbpolicyd ]; then
      echo "cbpolicyd not installed, skipping."
      exit 0
    fi
    checkrunning

    echo -n "Starting policyd..."
    if [ $RUNNING = 1 ]; then
      echo "policyd is already running."
      exit 0
    else
      if [ ! -d /opt/zextras/data/cbpolicyd/db ]; then
        mkdir /opt/zextras/data/cbpolicyd/db
      fi
      if [ ! -f ${dbfile} ]; then
        /opt/zextras/libexec/zmcbpolicydinit
        if [ $? != 0 ]; then
          echo "Unable to initialize cbpolicyd database."
          exit 1
        fi
      fi
      if [ $2 = "" ]; then
        rewriteconfig
      fi
      /opt/zextras/common/bin/cbpolicyd --config /opt/zextras/conf/cbpolicyd.conf 2>/dev/null
      for ((i = 0; i < 30; i++)); do
        sleep 1
        checkrunning
        if [ $RUNNING = 1 ]; then
          break
        fi
      done
      if [ "$PID" = "" ]; then
        echo "failed."
        exit 1
      else
        echo "done."
      fi
    fi
    ;;

  'kill')
    $0 stop
    ;;

  'stop')
    checkrunning
    echo -n "Stopping policyd..."
    if [ $RUNNING = 0 ]; then
      echo "policyd is not running."
      exit 0
    else
      kill $PID 2>/dev/null
      for ((i = 0; i < 300; i++)); do
        sleep 5
        kill -0 $PID 2>/dev/null
        if [ $? != 0 ]; then
          echo " done."
          exit 0
        fi
      done
      kill $PID 2>/dev/null
      if [ $? = 0 ]; then
        echo " failed to stop $PID"
        exit 1
      else
        echo " done."
      fi
    fi
    exit 0
    ;;

  'restart' | 'reload')
    $0 stop
    $0 start $2
    ;;

  'status')
    checkrunning
    echo -n "policyd is "
    if [ $RUNNING = 0 ]; then
      echo "not running."
      exit 1
    else
      echo "running."
      exit 0
    fi
    ;;

  *)
    echo "Usage: $0 start|stop|kill|reload|restart|status"
    exit 1
    ;;
esac
