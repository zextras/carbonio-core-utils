#!/bin/bash

# SPDX-FileCopyrightText: 2022 Synacor, Inc.
# SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>
#
# SPDX-License-Identifier: GPL-2.0-only

if [ x$(whoami) != xzextras ]; then
  echo Error: must be run as zextras user
  exit 1
fi

if [ ! -x "/opt/zextras/common/sbin/clamd" ]; then
  exit 0
fi

source /opt/zextras/bin/zmshutil || exit 1
zmsetvars

pidfile=${zimbra_log_directory}/clamd.pid

if [ ! -d "/opt/zextras/data/clamav/db" ]; then
  mkdir -p /opt/zextras/data/clamav/db
fi

rewriteconfig() {
  /opt/zextras/libexec/configrewrite antivirus >/dev/null 2>&1
}

getpid() {
  if [ -f $pidfile ]; then
    cpid=$(cat $pidfile)
  fi
}

checkrunning() {
  getpid
  # clamd
  if [ "x$cpid" = "x" ]; then
    running=0
  else
    if ps --no-headers -p $cpid -o cmd 2>/dev/null | grep clamd >/dev/null 2>&1; then
      running=1
    else
      rm $pidfile
      cpid=""
      running=0
    fi
  fi
}

pskillall() {
  ps_cmd="/bin/ps ax -o pid,ppid,command"
  killsig="$1"
  pname=$(echo "$2" | sed -e 's%/%\\\/%g')
  plist=$(${ps_cmd} | awk '{ if ( $3 ~ /'${pname}'/ ) { print $1 " " $2 } }' | sort -nr -k2 -k1 | awk '{ print $1 }')
  for p in ${plist}; do
    kill ${killsig} ${p}
  done
}

#
# Main
#
case "$1" in
'start')
  if [ x$2 = "x" ]; then
    rewriteconfig
  fi

  checkrunning
  echo -n "Starting clamd..."
  if [ $running = 1 ]; then
    echo "clamd is already running."
  else
    /opt/zextras/common/sbin/clamd \
      --config-file=/opt/zextras/conf/clamd.conf \
      >>${zimbra_log_directory}/clamd.log 2>&1 &

    for ((i = 0; i < 12; i++)); do
      checkrunning
      if [ $running = 1 ]; then
        echo "done."
        exit 0
      fi
      sleep 5
    done
    echo "failed."
    exit 1
  fi
  exit 0
  ;;

'kill')
  if [ -f /opt/zextras/log/clamd.pid ]; then
    cpid=$(cat /opt/zextras/log/clamd.pid)
    kill -9 "$cpid" 2>/dev/null
  fi
  pskillall -9 /opt/zextras/common/sbin/clamd
  exit 0
  ;;

'stop')
  checkrunning
  echo -n "Stopping clamd..."
  if [ $running = 0 ]; then
    echo "clamd is not running."
  else
    if [ x"$cpid" != "x" ]; then
      kill -TERM "$cpid" 2>/dev/null
    fi
    for ((i = 0; i < 30; i++)); do
      sleep 2
      kill -0 $cpid 2>/dev/null
      if [ $? != 0 ]; then
        rm -f ${pidfile}
        break
      fi
      kill $cpid
    done
    if [ -s ${pidfile} ]; then
      echo "failed."
      exit 1
    else
      echo "done."
    fi
  fi
  exit 0
  ;;

'restart' | 'reload')
  $0 stop
  $0 start $2
  ;;

'status')
  checkrunning
  echo -n "clamd is "
  if [ $running = 1 ]; then
    echo "running."
    exit 0
  else
    echo "not runnning."
    exit 1
  fi
  ;;

*)
  echo "Usage: $0 start|stop|kill|restart|status"
  exit 1
  ;;
esac
